-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Daniel Yang\Desktop\Good Hphones\codegen\hydrophones\hdlsrc\hydrophones_fixpt.vhd
-- Created: 2018-06-14 15:51:54
-- 
-- Generated by MATLAB 9.3, MATLAB Coder 3.4 and HDL Coder 3.11
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- tdoa1                         ce_out        1
-- tdoa2                         ce_out        1
-- tdoa3                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hydrophones_fixpt
-- Source Path: hydrophones_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.hydrophones_fixpt_pkg.ALL;

ENTITY hydrophones_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        in1                               :   IN    unsigned(15 DOWNTO 0);  -- ufix16_En14
        in2                               :   IN    unsigned(15 DOWNTO 0);  -- ufix16_En14
        in3                               :   IN    unsigned(15 DOWNTO 0);  -- ufix16_En14
        in4                               :   IN    unsigned(15 DOWNTO 0);  -- ufix16_En14
        ce_out                            :   OUT   std_logic;
        tdoa1                             :   OUT   signed(15 DOWNTO 0);  -- sfix16_En12
        tdoa2                             :   OUT   signed(15 DOWNTO 0);  -- sfix16_En12
        tdoa3                             :   OUT   signed(15 DOWNTO 0)  -- sfix16_En12
        );
END hydrophones_fixpt;


ARCHITECTURE rtl OF hydrophones_fixpt IS

  -- Constants
  CONSTANT nc                             : vector_of_signed16(0 TO 255) := 
    (to_signed(16#0000#, 16), to_signed(16#0324#, 16), to_signed(16#0648#, 16), to_signed(16#096B#, 16),
     to_signed(16#0C8C#, 16), to_signed(16#0FAB#, 16), to_signed(16#12C8#, 16), to_signed(16#15E2#, 16),
     to_signed(16#18F9#, 16), to_signed(16#1C0C#, 16), to_signed(16#1F1A#, 16), to_signed(16#2224#, 16),
     to_signed(16#2528#, 16), to_signed(16#2827#, 16), to_signed(16#2B1F#, 16), to_signed(16#2E11#, 16),
     to_signed(16#30FC#, 16), to_signed(16#33DF#, 16), to_signed(16#36BA#, 16), to_signed(16#398D#, 16),
     to_signed(16#3C57#, 16), to_signed(16#3F17#, 16), to_signed(16#41CE#, 16), to_signed(16#447B#, 16),
     to_signed(16#471D#, 16), to_signed(16#49B4#, 16), to_signed(16#4C40#, 16), to_signed(16#4EC0#, 16),
     to_signed(16#5134#, 16), to_signed(16#539B#, 16), to_signed(16#55F6#, 16), to_signed(16#5843#, 16),
     to_signed(16#5A82#, 16), to_signed(16#5CB4#, 16), to_signed(16#5ED7#, 16), to_signed(16#60EC#, 16),
     to_signed(16#62F2#, 16), to_signed(16#64E9#, 16), to_signed(16#66D0#, 16), to_signed(16#68A7#, 16),
     to_signed(16#6A6E#, 16), to_signed(16#6C24#, 16), to_signed(16#6DCA#, 16), to_signed(16#6F5F#, 16),
     to_signed(16#70E3#, 16), to_signed(16#7255#, 16), to_signed(16#73B6#, 16), to_signed(16#7505#, 16),
     to_signed(16#7642#, 16), to_signed(16#776C#, 16), to_signed(16#7885#, 16), to_signed(16#798A#, 16),
     to_signed(16#7A7D#, 16), to_signed(16#7B5D#, 16), to_signed(16#7C2A#, 16), to_signed(16#7CE4#, 16),
     to_signed(16#7D8A#, 16), to_signed(16#7E1E#, 16), to_signed(16#7E9D#, 16), to_signed(16#7F0A#, 16),
     to_signed(16#7F62#, 16), to_signed(16#7FA7#, 16), to_signed(16#7FD9#, 16), to_signed(16#7FF6#, 16),
     to_signed(16#7FFF#, 16), to_signed(16#7FF6#, 16), to_signed(16#7FD9#, 16), to_signed(16#7FA7#, 16),
     to_signed(16#7F62#, 16), to_signed(16#7F0A#, 16), to_signed(16#7E9D#, 16), to_signed(16#7E1E#, 16),
     to_signed(16#7D8A#, 16), to_signed(16#7CE4#, 16), to_signed(16#7C2A#, 16), to_signed(16#7B5D#, 16),
     to_signed(16#7A7D#, 16), to_signed(16#798A#, 16), to_signed(16#7885#, 16), to_signed(16#776C#, 16),
     to_signed(16#7642#, 16), to_signed(16#7505#, 16), to_signed(16#73B6#, 16), to_signed(16#7255#, 16),
     to_signed(16#70E3#, 16), to_signed(16#6F5F#, 16), to_signed(16#6DCA#, 16), to_signed(16#6C24#, 16),
     to_signed(16#6A6E#, 16), to_signed(16#68A7#, 16), to_signed(16#66D0#, 16), to_signed(16#64E9#, 16),
     to_signed(16#62F2#, 16), to_signed(16#60EC#, 16), to_signed(16#5ED7#, 16), to_signed(16#5CB4#, 16),
     to_signed(16#5A82#, 16), to_signed(16#5843#, 16), to_signed(16#55F6#, 16), to_signed(16#539B#, 16),
     to_signed(16#5134#, 16), to_signed(16#4EC0#, 16), to_signed(16#4C40#, 16), to_signed(16#49B4#, 16),
     to_signed(16#471D#, 16), to_signed(16#447B#, 16), to_signed(16#41CE#, 16), to_signed(16#3F17#, 16),
     to_signed(16#3C57#, 16), to_signed(16#398D#, 16), to_signed(16#36BA#, 16), to_signed(16#33DF#, 16),
     to_signed(16#30FC#, 16), to_signed(16#2E11#, 16), to_signed(16#2B1F#, 16), to_signed(16#2827#, 16),
     to_signed(16#2528#, 16), to_signed(16#2224#, 16), to_signed(16#1F1A#, 16), to_signed(16#1C0C#, 16),
     to_signed(16#18F9#, 16), to_signed(16#15E2#, 16), to_signed(16#12C8#, 16), to_signed(16#0FAB#, 16),
     to_signed(16#0C8C#, 16), to_signed(16#096B#, 16), to_signed(16#0648#, 16), to_signed(16#0324#, 16),
     to_signed(16#0000#, 16), to_signed(-16#0324#, 16), to_signed(-16#0648#, 16), to_signed(-16#096B#, 16),
     to_signed(-16#0C8C#, 16), to_signed(-16#0FAB#, 16), to_signed(-16#12C8#, 16), to_signed(-16#15E2#, 16),
     to_signed(-16#18F9#, 16), to_signed(-16#1C0C#, 16), to_signed(-16#1F1A#, 16), to_signed(-16#2224#, 16),
     to_signed(-16#2528#, 16), to_signed(-16#2827#, 16), to_signed(-16#2B1F#, 16), to_signed(-16#2E11#, 16),
     to_signed(-16#30FC#, 16), to_signed(-16#33DF#, 16), to_signed(-16#36BA#, 16), to_signed(-16#398D#, 16),
     to_signed(-16#3C57#, 16), to_signed(-16#3F17#, 16), to_signed(-16#41CE#, 16), to_signed(-16#447B#, 16),
     to_signed(-16#471D#, 16), to_signed(-16#49B4#, 16), to_signed(-16#4C40#, 16), to_signed(-16#4EC0#, 16),
     to_signed(-16#5134#, 16), to_signed(-16#539B#, 16), to_signed(-16#55F6#, 16), to_signed(-16#5843#, 16),
     to_signed(-16#5A82#, 16), to_signed(-16#5CB4#, 16), to_signed(-16#5ED7#, 16), to_signed(-16#60EC#, 16),
     to_signed(-16#62F2#, 16), to_signed(-16#64E9#, 16), to_signed(-16#66D0#, 16), to_signed(-16#68A7#, 16),
     to_signed(-16#6A6E#, 16), to_signed(-16#6C24#, 16), to_signed(-16#6DCA#, 16), to_signed(-16#6F5F#, 16),
     to_signed(-16#70E3#, 16), to_signed(-16#7255#, 16), to_signed(-16#73B6#, 16), to_signed(-16#7505#, 16),
     to_signed(-16#7642#, 16), to_signed(-16#776C#, 16), to_signed(-16#7885#, 16), to_signed(-16#798A#, 16),
     to_signed(-16#7A7D#, 16), to_signed(-16#7B5D#, 16), to_signed(-16#7C2A#, 16), to_signed(-16#7CE4#, 16),
     to_signed(-16#7D8A#, 16), to_signed(-16#7E1E#, 16), to_signed(-16#7E9D#, 16), to_signed(-16#7F0A#, 16),
     to_signed(-16#7F62#, 16), to_signed(-16#7FA7#, 16), to_signed(-16#7FD9#, 16), to_signed(-16#7FF6#, 16),
     to_signed(-16#7FFF#, 16), to_signed(-16#7FF6#, 16), to_signed(-16#7FD9#, 16), to_signed(-16#7FA7#, 16),
     to_signed(-16#7F62#, 16), to_signed(-16#7F0A#, 16), to_signed(-16#7E9D#, 16), to_signed(-16#7E1E#, 16),
     to_signed(-16#7D8A#, 16), to_signed(-16#7CE4#, 16), to_signed(-16#7C2A#, 16), to_signed(-16#7B5D#, 16),
     to_signed(-16#7A7D#, 16), to_signed(-16#798A#, 16), to_signed(-16#7885#, 16), to_signed(-16#776C#, 16),
     to_signed(-16#7642#, 16), to_signed(-16#7505#, 16), to_signed(-16#73B6#, 16), to_signed(-16#7255#, 16),
     to_signed(-16#70E3#, 16), to_signed(-16#6F5F#, 16), to_signed(-16#6DCA#, 16), to_signed(-16#6C24#, 16),
     to_signed(-16#6A6E#, 16), to_signed(-16#68A7#, 16), to_signed(-16#66D0#, 16), to_signed(-16#64E9#, 16),
     to_signed(-16#62F2#, 16), to_signed(-16#60EC#, 16), to_signed(-16#5ED7#, 16), to_signed(-16#5CB4#, 16),
     to_signed(-16#5A82#, 16), to_signed(-16#5843#, 16), to_signed(-16#55F6#, 16), to_signed(-16#539B#, 16),
     to_signed(-16#5134#, 16), to_signed(-16#4EC0#, 16), to_signed(-16#4C40#, 16), to_signed(-16#49B4#, 16),
     to_signed(-16#471D#, 16), to_signed(-16#447B#, 16), to_signed(-16#41CE#, 16), to_signed(-16#3F17#, 16),
     to_signed(-16#3C57#, 16), to_signed(-16#398D#, 16), to_signed(-16#36BA#, 16), to_signed(-16#33DF#, 16),
     to_signed(-16#30FC#, 16), to_signed(-16#2E11#, 16), to_signed(-16#2B1F#, 16), to_signed(-16#2827#, 16),
     to_signed(-16#2528#, 16), to_signed(-16#2224#, 16), to_signed(-16#1F1A#, 16), to_signed(-16#1C0C#, 16),
     to_signed(-16#18F9#, 16), to_signed(-16#15E2#, 16), to_signed(-16#12C8#, 16), to_signed(-16#0FAB#, 16),
     to_signed(-16#0C8C#, 16), to_signed(-16#096B#, 16), to_signed(-16#0648#, 16), to_signed(-16#0324#, 16));  -- sfix16 [256]
  CONSTANT nc_2                           : vector_of_signed16(0 TO 255) := 
    (to_signed(16#7FFF#, 16), to_signed(16#7FF6#, 16), to_signed(16#7FD9#, 16), to_signed(16#7FA7#, 16),
     to_signed(16#7F62#, 16), to_signed(16#7F0A#, 16), to_signed(16#7E9D#, 16), to_signed(16#7E1E#, 16),
     to_signed(16#7D8A#, 16), to_signed(16#7CE4#, 16), to_signed(16#7C2A#, 16), to_signed(16#7B5D#, 16),
     to_signed(16#7A7D#, 16), to_signed(16#798A#, 16), to_signed(16#7885#, 16), to_signed(16#776C#, 16),
     to_signed(16#7642#, 16), to_signed(16#7505#, 16), to_signed(16#73B6#, 16), to_signed(16#7255#, 16),
     to_signed(16#70E3#, 16), to_signed(16#6F5F#, 16), to_signed(16#6DCA#, 16), to_signed(16#6C24#, 16),
     to_signed(16#6A6E#, 16), to_signed(16#68A7#, 16), to_signed(16#66D0#, 16), to_signed(16#64E9#, 16),
     to_signed(16#62F2#, 16), to_signed(16#60EC#, 16), to_signed(16#5ED7#, 16), to_signed(16#5CB4#, 16),
     to_signed(16#5A82#, 16), to_signed(16#5843#, 16), to_signed(16#55F6#, 16), to_signed(16#539B#, 16),
     to_signed(16#5134#, 16), to_signed(16#4EC0#, 16), to_signed(16#4C40#, 16), to_signed(16#49B4#, 16),
     to_signed(16#471D#, 16), to_signed(16#447B#, 16), to_signed(16#41CE#, 16), to_signed(16#3F17#, 16),
     to_signed(16#3C57#, 16), to_signed(16#398D#, 16), to_signed(16#36BA#, 16), to_signed(16#33DF#, 16),
     to_signed(16#30FC#, 16), to_signed(16#2E11#, 16), to_signed(16#2B1F#, 16), to_signed(16#2827#, 16),
     to_signed(16#2528#, 16), to_signed(16#2224#, 16), to_signed(16#1F1A#, 16), to_signed(16#1C0C#, 16),
     to_signed(16#18F9#, 16), to_signed(16#15E2#, 16), to_signed(16#12C8#, 16), to_signed(16#0FAB#, 16),
     to_signed(16#0C8C#, 16), to_signed(16#096B#, 16), to_signed(16#0648#, 16), to_signed(16#0324#, 16),
     to_signed(16#0000#, 16), to_signed(-16#0324#, 16), to_signed(-16#0648#, 16), to_signed(-16#096B#, 16),
     to_signed(-16#0C8C#, 16), to_signed(-16#0FAB#, 16), to_signed(-16#12C8#, 16), to_signed(-16#15E2#, 16),
     to_signed(-16#18F9#, 16), to_signed(-16#1C0C#, 16), to_signed(-16#1F1A#, 16), to_signed(-16#2224#, 16),
     to_signed(-16#2528#, 16), to_signed(-16#2827#, 16), to_signed(-16#2B1F#, 16), to_signed(-16#2E11#, 16),
     to_signed(-16#30FC#, 16), to_signed(-16#33DF#, 16), to_signed(-16#36BA#, 16), to_signed(-16#398D#, 16),
     to_signed(-16#3C57#, 16), to_signed(-16#3F17#, 16), to_signed(-16#41CE#, 16), to_signed(-16#447B#, 16),
     to_signed(-16#471D#, 16), to_signed(-16#49B4#, 16), to_signed(-16#4C40#, 16), to_signed(-16#4EC0#, 16),
     to_signed(-16#5134#, 16), to_signed(-16#539B#, 16), to_signed(-16#55F6#, 16), to_signed(-16#5843#, 16),
     to_signed(-16#5A82#, 16), to_signed(-16#5CB4#, 16), to_signed(-16#5ED7#, 16), to_signed(-16#60EC#, 16),
     to_signed(-16#62F2#, 16), to_signed(-16#64E9#, 16), to_signed(-16#66D0#, 16), to_signed(-16#68A7#, 16),
     to_signed(-16#6A6E#, 16), to_signed(-16#6C24#, 16), to_signed(-16#6DCA#, 16), to_signed(-16#6F5F#, 16),
     to_signed(-16#70E3#, 16), to_signed(-16#7255#, 16), to_signed(-16#73B6#, 16), to_signed(-16#7505#, 16),
     to_signed(-16#7642#, 16), to_signed(-16#776C#, 16), to_signed(-16#7885#, 16), to_signed(-16#798A#, 16),
     to_signed(-16#7A7D#, 16), to_signed(-16#7B5D#, 16), to_signed(-16#7C2A#, 16), to_signed(-16#7CE4#, 16),
     to_signed(-16#7D8A#, 16), to_signed(-16#7E1E#, 16), to_signed(-16#7E9D#, 16), to_signed(-16#7F0A#, 16),
     to_signed(-16#7F62#, 16), to_signed(-16#7FA7#, 16), to_signed(-16#7FD9#, 16), to_signed(-16#7FF6#, 16),
     to_signed(-16#7FFF#, 16), to_signed(-16#7FF6#, 16), to_signed(-16#7FD9#, 16), to_signed(-16#7FA7#, 16),
     to_signed(-16#7F62#, 16), to_signed(-16#7F0A#, 16), to_signed(-16#7E9D#, 16), to_signed(-16#7E1E#, 16),
     to_signed(-16#7D8A#, 16), to_signed(-16#7CE4#, 16), to_signed(-16#7C2A#, 16), to_signed(-16#7B5D#, 16),
     to_signed(-16#7A7D#, 16), to_signed(-16#798A#, 16), to_signed(-16#7885#, 16), to_signed(-16#776C#, 16),
     to_signed(-16#7642#, 16), to_signed(-16#7505#, 16), to_signed(-16#73B6#, 16), to_signed(-16#7255#, 16),
     to_signed(-16#70E3#, 16), to_signed(-16#6F5F#, 16), to_signed(-16#6DCA#, 16), to_signed(-16#6C24#, 16),
     to_signed(-16#6A6E#, 16), to_signed(-16#68A7#, 16), to_signed(-16#66D0#, 16), to_signed(-16#64E9#, 16),
     to_signed(-16#62F2#, 16), to_signed(-16#60EC#, 16), to_signed(-16#5ED7#, 16), to_signed(-16#5CB4#, 16),
     to_signed(-16#5A82#, 16), to_signed(-16#5843#, 16), to_signed(-16#55F6#, 16), to_signed(-16#539B#, 16),
     to_signed(-16#5134#, 16), to_signed(-16#4EC0#, 16), to_signed(-16#4C40#, 16), to_signed(-16#49B4#, 16),
     to_signed(-16#471D#, 16), to_signed(-16#447B#, 16), to_signed(-16#41CE#, 16), to_signed(-16#3F17#, 16),
     to_signed(-16#3C57#, 16), to_signed(-16#398D#, 16), to_signed(-16#36BA#, 16), to_signed(-16#33DF#, 16),
     to_signed(-16#30FC#, 16), to_signed(-16#2E11#, 16), to_signed(-16#2B1F#, 16), to_signed(-16#2827#, 16),
     to_signed(-16#2528#, 16), to_signed(-16#2224#, 16), to_signed(-16#1F1A#, 16), to_signed(-16#1C0C#, 16),
     to_signed(-16#18F9#, 16), to_signed(-16#15E2#, 16), to_signed(-16#12C8#, 16), to_signed(-16#0FAB#, 16),
     to_signed(-16#0C8C#, 16), to_signed(-16#096B#, 16), to_signed(-16#0648#, 16), to_signed(-16#0324#, 16),
     to_signed(16#0000#, 16), to_signed(16#0324#, 16), to_signed(16#0648#, 16), to_signed(16#096B#, 16),
     to_signed(16#0C8C#, 16), to_signed(16#0FAB#, 16), to_signed(16#12C8#, 16), to_signed(16#15E2#, 16),
     to_signed(16#18F9#, 16), to_signed(16#1C0C#, 16), to_signed(16#1F1A#, 16), to_signed(16#2224#, 16),
     to_signed(16#2528#, 16), to_signed(16#2827#, 16), to_signed(16#2B1F#, 16), to_signed(16#2E11#, 16),
     to_signed(16#30FC#, 16), to_signed(16#33DF#, 16), to_signed(16#36BA#, 16), to_signed(16#398D#, 16),
     to_signed(16#3C57#, 16), to_signed(16#3F17#, 16), to_signed(16#41CE#, 16), to_signed(16#447B#, 16),
     to_signed(16#471D#, 16), to_signed(16#49B4#, 16), to_signed(16#4C40#, 16), to_signed(16#4EC0#, 16),
     to_signed(16#5134#, 16), to_signed(16#539B#, 16), to_signed(16#55F6#, 16), to_signed(16#5843#, 16),
     to_signed(16#5A82#, 16), to_signed(16#5CB4#, 16), to_signed(16#5ED7#, 16), to_signed(16#60EC#, 16),
     to_signed(16#62F2#, 16), to_signed(16#64E9#, 16), to_signed(16#66D0#, 16), to_signed(16#68A7#, 16),
     to_signed(16#6A6E#, 16), to_signed(16#6C24#, 16), to_signed(16#6DCA#, 16), to_signed(16#6F5F#, 16),
     to_signed(16#70E3#, 16), to_signed(16#7255#, 16), to_signed(16#73B6#, 16), to_signed(16#7505#, 16),
     to_signed(16#7642#, 16), to_signed(16#776C#, 16), to_signed(16#7885#, 16), to_signed(16#798A#, 16),
     to_signed(16#7A7D#, 16), to_signed(16#7B5D#, 16), to_signed(16#7C2A#, 16), to_signed(16#7CE4#, 16),
     to_signed(16#7D8A#, 16), to_signed(16#7E1E#, 16), to_signed(16#7E9D#, 16), to_signed(16#7F0A#, 16),
     to_signed(16#7F62#, 16), to_signed(16#7FA7#, 16), to_signed(16#7FD9#, 16), to_signed(16#7FF6#, 16));  -- sfix16 [256]
  CONSTANT nc_4                           : vector_of_unsigned16(0 TO 256) := 
    (to_unsigned(16#0000#, 16), to_unsigned(16#0100#, 16), to_unsigned(16#0200#, 16), to_unsigned(16#0300#, 16),
     to_unsigned(16#0400#, 16), to_unsigned(16#0500#, 16), to_unsigned(16#0600#, 16), to_unsigned(16#0700#, 16),
     to_unsigned(16#07FF#, 16), to_unsigned(16#08FF#, 16), to_unsigned(16#09FF#, 16), to_unsigned(16#0AFE#, 16),
     to_unsigned(16#0BFE#, 16), to_unsigned(16#0CFD#, 16), to_unsigned(16#0DFC#, 16), to_unsigned(16#0EFC#, 16),
     to_unsigned(16#0FFB#, 16), to_unsigned(16#10FA#, 16), to_unsigned(16#11F8#, 16), to_unsigned(16#12F7#, 16),
     to_unsigned(16#13F6#, 16), to_unsigned(16#14F4#, 16), to_unsigned(16#15F2#, 16), to_unsigned(16#16F0#, 16),
     to_unsigned(16#17EE#, 16), to_unsigned(16#18EC#, 16), to_unsigned(16#19E9#, 16), to_unsigned(16#1AE7#, 16),
     to_unsigned(16#1BE4#, 16), to_unsigned(16#1CE0#, 16), to_unsigned(16#1DDD#, 16), to_unsigned(16#1EDA#, 16),
     to_unsigned(16#1FD6#, 16), to_unsigned(16#20D2#, 16), to_unsigned(16#21CD#, 16), to_unsigned(16#22C9#, 16),
     to_unsigned(16#23C4#, 16), to_unsigned(16#24BF#, 16), to_unsigned(16#25B9#, 16), to_unsigned(16#26B4#, 16),
     to_unsigned(16#27AE#, 16), to_unsigned(16#28A8#, 16), to_unsigned(16#29A1#, 16), to_unsigned(16#2A9A#, 16),
     to_unsigned(16#2B93#, 16), to_unsigned(16#2C8B#, 16), to_unsigned(16#2D84#, 16), to_unsigned(16#2E7B#, 16),
     to_unsigned(16#2F73#, 16), to_unsigned(16#306A#, 16), to_unsigned(16#3161#, 16), to_unsigned(16#3257#, 16),
     to_unsigned(16#334D#, 16), to_unsigned(16#3443#, 16), to_unsigned(16#3538#, 16), to_unsigned(16#362D#, 16),
     to_unsigned(16#3722#, 16), to_unsigned(16#3816#, 16), to_unsigned(16#3909#, 16), to_unsigned(16#39FD#, 16),
     to_unsigned(16#3AF0#, 16), to_unsigned(16#3BE2#, 16), to_unsigned(16#3CD4#, 16), to_unsigned(16#3DC6#, 16),
     to_unsigned(16#3EB7#, 16), to_unsigned(16#3FA8#, 16), to_unsigned(16#4098#, 16), to_unsigned(16#4188#, 16),
     to_unsigned(16#4277#, 16), to_unsigned(16#4366#, 16), to_unsigned(16#4454#, 16), to_unsigned(16#4542#, 16),
     to_unsigned(16#4630#, 16), to_unsigned(16#471D#, 16), to_unsigned(16#4809#, 16), to_unsigned(16#48F5#, 16),
     to_unsigned(16#49E1#, 16), to_unsigned(16#4ACC#, 16), to_unsigned(16#4BB6#, 16), to_unsigned(16#4CA0#, 16),
     to_unsigned(16#4D8A#, 16), to_unsigned(16#4E73#, 16), to_unsigned(16#4F5B#, 16), to_unsigned(16#5043#, 16),
     to_unsigned(16#512B#, 16), to_unsigned(16#5211#, 16), to_unsigned(16#52F8#, 16), to_unsigned(16#53DD#, 16),
     to_unsigned(16#54C3#, 16), to_unsigned(16#55A7#, 16), to_unsigned(16#568C#, 16), to_unsigned(16#576F#, 16),
     to_unsigned(16#5852#, 16), to_unsigned(16#5934#, 16), to_unsigned(16#5A16#, 16), to_unsigned(16#5AF8#, 16),
     to_unsigned(16#5BD8#, 16), to_unsigned(16#5CB9#, 16), to_unsigned(16#5D98#, 16), to_unsigned(16#5E77#, 16),
     to_unsigned(16#5F56#, 16), to_unsigned(16#6033#, 16), to_unsigned(16#6111#, 16), to_unsigned(16#61ED#, 16),
     to_unsigned(16#62C9#, 16), to_unsigned(16#63A5#, 16), to_unsigned(16#647F#, 16), to_unsigned(16#655A#, 16),
     to_unsigned(16#6633#, 16), to_unsigned(16#670C#, 16), to_unsigned(16#67E5#, 16), to_unsigned(16#68BD#, 16),
     to_unsigned(16#6994#, 16), to_unsigned(16#6A6A#, 16), to_unsigned(16#6B40#, 16), to_unsigned(16#6C16#, 16),
     to_unsigned(16#6CEA#, 16), to_unsigned(16#6DBE#, 16), to_unsigned(16#6E92#, 16), to_unsigned(16#6F65#, 16),
     to_unsigned(16#7037#, 16), to_unsigned(16#7108#, 16), to_unsigned(16#71D9#, 16), to_unsigned(16#72AA#, 16),
     to_unsigned(16#7379#, 16), to_unsigned(16#7448#, 16), to_unsigned(16#7517#, 16), to_unsigned(16#75E4#, 16),
     to_unsigned(16#76B2#, 16), to_unsigned(16#777E#, 16), to_unsigned(16#784A#, 16), to_unsigned(16#7915#, 16),
     to_unsigned(16#79E0#, 16), to_unsigned(16#7AAA#, 16), to_unsigned(16#7B73#, 16), to_unsigned(16#7C3B#, 16),
     to_unsigned(16#7D03#, 16), to_unsigned(16#7DCB#, 16), to_unsigned(16#7E91#, 16), to_unsigned(16#7F58#, 16),
     to_unsigned(16#801D#, 16), to_unsigned(16#80E2#, 16), to_unsigned(16#81A6#, 16), to_unsigned(16#8269#, 16),
     to_unsigned(16#832C#, 16), to_unsigned(16#83EE#, 16), to_unsigned(16#84B0#, 16), to_unsigned(16#8570#, 16),
     to_unsigned(16#8631#, 16), to_unsigned(16#86F0#, 16), to_unsigned(16#87AF#, 16), to_unsigned(16#886D#, 16),
     to_unsigned(16#892B#, 16), to_unsigned(16#89E8#, 16), to_unsigned(16#8AA4#, 16), to_unsigned(16#8B60#, 16),
     to_unsigned(16#8C1B#, 16), to_unsigned(16#8CD5#, 16), to_unsigned(16#8D8F#, 16), to_unsigned(16#8E48#, 16),
     to_unsigned(16#8F00#, 16), to_unsigned(16#8FB8#, 16), to_unsigned(16#906F#, 16), to_unsigned(16#9126#, 16),
     to_unsigned(16#91DC#, 16), to_unsigned(16#9291#, 16), to_unsigned(16#9345#, 16), to_unsigned(16#93F9#, 16),
     to_unsigned(16#94AC#, 16), to_unsigned(16#955F#, 16), to_unsigned(16#9611#, 16), to_unsigned(16#96C2#, 16),
     to_unsigned(16#9773#, 16), to_unsigned(16#9823#, 16), to_unsigned(16#98D3#, 16), to_unsigned(16#9981#, 16),
     to_unsigned(16#9A30#, 16), to_unsigned(16#9ADD#, 16), to_unsigned(16#9B8A#, 16), to_unsigned(16#9C36#, 16),
     to_unsigned(16#9CE2#, 16), to_unsigned(16#9D8D#, 16), to_unsigned(16#9E37#, 16), to_unsigned(16#9EE1#, 16),
     to_unsigned(16#9F8A#, 16), to_unsigned(16#A032#, 16), to_unsigned(16#A0DA#, 16), to_unsigned(16#A182#, 16),
     to_unsigned(16#A228#, 16), to_unsigned(16#A2CE#, 16), to_unsigned(16#A374#, 16), to_unsigned(16#A418#, 16),
     to_unsigned(16#A4BC#, 16), to_unsigned(16#A560#, 16), to_unsigned(16#A603#, 16), to_unsigned(16#A6A5#, 16),
     to_unsigned(16#A747#, 16), to_unsigned(16#A7E8#, 16), to_unsigned(16#A889#, 16), to_unsigned(16#A928#, 16),
     to_unsigned(16#A9C8#, 16), to_unsigned(16#AA66#, 16), to_unsigned(16#AB04#, 16), to_unsigned(16#ABA2#, 16),
     to_unsigned(16#AC3F#, 16), to_unsigned(16#ACDB#, 16), to_unsigned(16#AD77#, 16), to_unsigned(16#AE12#, 16),
     to_unsigned(16#AEAC#, 16), to_unsigned(16#AF46#, 16), to_unsigned(16#AFE0#, 16), to_unsigned(16#B078#, 16),
     to_unsigned(16#B110#, 16), to_unsigned(16#B1A8#, 16), to_unsigned(16#B23F#, 16), to_unsigned(16#B2D5#, 16),
     to_unsigned(16#B36B#, 16), to_unsigned(16#B400#, 16), to_unsigned(16#B495#, 16), to_unsigned(16#B529#, 16),
     to_unsigned(16#B5BD#, 16), to_unsigned(16#B650#, 16), to_unsigned(16#B6E2#, 16), to_unsigned(16#B774#, 16),
     to_unsigned(16#B805#, 16), to_unsigned(16#B896#, 16), to_unsigned(16#B926#, 16), to_unsigned(16#B9B6#, 16),
     to_unsigned(16#BA45#, 16), to_unsigned(16#BAD3#, 16), to_unsigned(16#BB61#, 16), to_unsigned(16#BBEF#, 16),
     to_unsigned(16#BC7B#, 16), to_unsigned(16#BD08#, 16), to_unsigned(16#BD93#, 16), to_unsigned(16#BE1F#, 16),
     to_unsigned(16#BEA9#, 16), to_unsigned(16#BF33#, 16), to_unsigned(16#BFBD#, 16), to_unsigned(16#C046#, 16),
     to_unsigned(16#C0CF#, 16), to_unsigned(16#C157#, 16), to_unsigned(16#C1DE#, 16), to_unsigned(16#C265#, 16),
     to_unsigned(16#C2EB#, 16), to_unsigned(16#C371#, 16), to_unsigned(16#C3F7#, 16), to_unsigned(16#C47B#, 16),
     to_unsigned(16#C500#, 16), to_unsigned(16#C583#, 16), to_unsigned(16#C607#, 16), to_unsigned(16#C68A#, 16),
     to_unsigned(16#C70C#, 16), to_unsigned(16#C78E#, 16), to_unsigned(16#C80F#, 16), to_unsigned(16#C890#, 16),
     to_unsigned(16#C910#, 16));  -- ufix16 [257]
  CONSTANT C_divbyzero_p                  : unsigned(32 DOWNTO 0) := 
    unsigned'("111111111111111111111111111111111");  -- ufix33
  CONSTANT c_divbyzero_p_0                : unsigned(30 DOWNTO 0) := 
    to_unsigned(16#7FFFFFFF#, 31);  -- ufix31

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL iter                             : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp                              : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL time_rsvd                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL p53time_div_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En24
  SIGNAL p53time_mul_temp                 : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL p53time_cast                     : unsigned(63 DOWNTO 0);  -- ufix64_En24
  SIGNAL p53time_cast_1                   : unsigned(57 DOWNTO 0);  -- ufix58_En24
  SIGNAL tmp_1                            : std_logic;
  SIGNAL out_rsvd                         : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL tmp_2                            : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL tmp_3                            : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL wave_idx                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p49wave_idx_x                    : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL p49wave_idx_div_temp             : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL p49wave_idx_mul_temp             : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL p49wave_idx_mul_temp_1           : unsigned(43 DOWNTO 0);  -- ufix44_En35
  SIGNAL FI_SIN_COS_LUT                   : vector_of_signed16(0 TO 255);  -- sfix16_En15 [256]
  SIGNAL in_rsvd                          : vector_of_unsigned16(0 TO 3);  -- ufix16_En14 [4]
  SIGNAL tmp_4                            : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_5                            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_6                            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL max_amplitude                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_7                            : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL FI_SIN_COS_LUT_1                 : vector_of_signed16(0 TO 255);  -- sfix16_En15 [256]
  SIGNAL tmp_8                            : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_9                            : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL min_amplitude                    : unsigned(15 DOWNTO 0);  -- ufix16_En9
  SIGNAL tmp_10                           : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL max_time                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_11                           : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_12                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_13                           : std_logic;
  SIGNAL p3tmp_cast                       : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL tmp_14                           : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_15                           : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL max_time_1                       : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_16                           : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_17                           : std_logic;
  SIGNAL tmp_18                           : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL imag                             : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL imag_1                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_19                           : std_logic;
  SIGNAL p3tmp_cast_1                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL tmp_20                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_21                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_22                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL imag_2                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL real_rsvd                        : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL real_rsvd_1                      : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL min_amplitude_1                  : unsigned(15 DOWNTO 0);  -- ufix16_En9
  SIGNAL tmp_23                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_24                           : std_logic;
  SIGNAL p3tmp_cast_2                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL tmp_25                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_26                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL max_amplitude_1                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_27                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_28                           : std_logic;
  SIGNAL p3tmp_cast_3                     : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL p3tmp_cast_4                     : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL tmp_29                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_30                           : std_logic;
  SIGNAL p3tmp_cast_5                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL tmp_31                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_32                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_33                           : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL real_rsvd_2                      : vector_of_signed14(0 TO 15);  -- sfix14_En13 [16]
  SIGNAL tmp_34                           : std_logic;
  SIGNAL p3tmp_cast_6                     : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL p3tmp_cast_7                     : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL tmp_35                           : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_36                           : std_logic;
  SIGNAL p3tmp_cast_8                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL tmp_37                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_38                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_39                           : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL tmp_40                           : std_logic;
  SIGNAL p3tmp_cast_9                     : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL p3tmp_cast_10                    : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL max_phase                        : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL ATAN_UFRAC_LUT                   : vector_of_unsigned16(0 TO 256);  -- ufix16_En16 [257]
  SIGNAL tmp_41                           : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL tmp_42                           : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL max_phase_1                      : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL max_phase_2                      : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL tmp_44                           : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL max_phase_3                      : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL tmp_45                           : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL tmp_46                           : vector_of_unsigned16(0 TO 15);  -- ufix16_En15 [16]
  SIGNAL phase_shift                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL p5phase_shift_sub_cast           : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL p5phase_shift_sub_cast_1         : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL p5phase_shift_sub_temp           : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL tmp_47                           : std_logic;
  SIGNAL tmp_48                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL p4tmp_1                          : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL p4tmp_add_cast                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_49                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_50                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_52                           : std_logic;
  SIGNAL tmp_53                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL p4tmp_3                          : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL p4tmp_sub_cast                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_54                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL tmp_55                           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL out_rsvd_1                       : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL tmp_56                           : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL tmp_57                           : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL tmp_58                           : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]

BEGIN
  enb <= clk_enable;

  tmp <= iter + to_unsigned(16#00001#, 20);

  -- 'hydrophones_fixpt:139' iter(:)=iter+fi(1, 0, 1, 0, fm);
  iter_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iter <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iter <= tmp;
      END IF;
    END IF;
  END PROCESS iter_reg_process;


  -- 'hydrophones_fixpt:45' time = fi(fi_div(iter * fi(1000000, 0, 20, 0, fm), sampling_rate), 0, 23, 0, fm);
  -- 
  -- 'hydrophones_fixpt:165' coder.inline( 'always' );
  -- 
  -- 'hydrophones_fixpt:166' if isfi( a ) && isfi( b ) && isscalar( b )
  -- 
  -- 'hydrophones_fixpt:167' a1 = fi( a, 'RoundMode', 'fix' );
  -- 
  -- 'hydrophones_fixpt:168' b1 = fi( b, 'RoundMode', 'fix' );
  -- 
  -- 'hydrophones_fixpt:169' c1 = divide( divideType( a1, b1 ), a1, b1 );
  -- 
  -- 'hydrophones_fixpt:170' c = fi( c1, numerictype( c1 ), fimath( a ) );
  -- 
  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp29_trueregionp1
  -- 
  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp40_trueregionp1
  p53time_mul_temp <= iter * to_unsigned(16#F4240#, 20);
  p53time_cast <= p53time_mul_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p53time_div_temp <= p53time_cast / to_unsigned(16#30D40#, 18);
  p53time_cast_1 <= p53time_div_temp(57 DOWNTO 0);
  time_rsvd <= p53time_cast_1(46 DOWNTO 24);

  -- 'hydrophones_fixpt:54' if (time > window)
  
  tmp_1 <= '1' WHEN time_rsvd > to_unsigned(16#000001#, 23) ELSE
      '0';

  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --           Generated by MATLAB 9.3 and Fixed-Point Designer 6.0           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- 'hydrophones_fixpt:8' fm = get_fimath();
  -- 
  -- 'hydrophones_fixpt:16' alpha = fi(.99, 0, 16, 16, fm);
  -- 
  -- 'hydrophones_fixpt:17' beta = fi(.01, 0, 16, 22, fm);
  -- 
  -- 'hydrophones_fixpt:18' out = fi(zeros(3), 1, 16, 12, fm);
  out_rsvd <= (OTHERS => to_signed(16#0000#, 16));

  tmp_2 <= (OTHERS => to_signed(16#0000#, 16));

  -- HDL code generation from MATLAB function: hydrophones_fixpt
  tmp_3 <= to_unsigned(16#000000#, 23);

  -- 'hydrophones_fixpt:47' microrevs = fi(mod((frequency * time),fi(1000000, 0, 20, 0, fm)), 0, 20, 0, fm);
  -- 
  -- 'hydrophones_fixpt:48' wave_idx = fi(microrevs * sine_wave_size*fi(1/1000000, 0, 16, 35, fm), 0, 8, 0, fm);
  p49wave_idx_x <= to_unsigned(16#61A8#, 15) * time_rsvd;
  p49wave_idx_div_temp <= p49wave_idx_x / to_unsigned(16#F4240#, 20);
  p49wave_idx_mul_temp <= resize(p49wave_idx_x - resize(p49wave_idx_div_temp * to_unsigned(16#F4240#, 20), 38), 20) * to_unsigned(16#C8#, 8);
  p49wave_idx_mul_temp_1 <= p49wave_idx_mul_temp * to_unsigned(16#8637#, 16);
  wave_idx <= p49wave_idx_mul_temp_1(42 DOWNTO 35);

  FI_SIN_COS_LUT <= nc;

  -- 'hydrophones_fixpt:19' frequency=fi(25000, 0, 15, 0, fm);
  -- 
  -- 'hydrophones_fixpt:20' sine_wave_size = fi(200, 0, 8, 0, fm);
  -- 
  -- 'hydrophones_fixpt:21' sampling_rate = fi(200000, 0, 18, 0, fm);
  -- 
  -- 'hydrophones_fixpt:22' window = fi(1, 0, 1, 0, fm);
  -- 
  -- 'hydrophones_fixpt:23' threshold = fi(0, 0, 1, 0, fm);
  -- 
  -- 'hydrophones_fixpt:24' if isempty(iter)
  -- 
  -- 'hydrophones_fixpt:27' if isempty(real)
  -- 
  -- 'hydrophones_fixpt:30' if isempty(imag)
  -- 
  -- 'hydrophones_fixpt:33' if isempty(max_time)
  -- 
  -- 'hydrophones_fixpt:36' if isempty(max_amplitude)
  -- 
  -- 'hydrophones_fixpt:39' if isempty(max_phase)
  -- 
  -- 'hydrophones_fixpt:43' in = fi([fi(in1, 0, 16, 14, fm) in2 in3 in4], 0, 16, 14, fm);
  in_rsvd(0) <= in1;
  in_rsvd(1) <= in2;
  in_rsvd(2) <= in3;
  in_rsvd(3) <= in4;

  tmp_4 <= (OTHERS => to_signed(16#0000#, 14));

  tmp_5 <= to_signed(16#0000#, 16);

  tmp_6 <= to_signed(16#0000#, 16);

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp27_trueregionp1
  max_amplitude <= to_signed(-16#8000#, 16);

  -- 'hydrophones_fixpt:135' imag(c) = 0;
  tmp_7 <= to_signed(16#0000#, 14);

  FI_SIN_COS_LUT_1 <= nc_2;

  tmp_8 <= (OTHERS => to_signed(16#0000#, 14));

  tmp_9 <= to_signed(16#0000#, 14);

  -- 'hydrophones_fixpt:80' max_phase(c) = pi;
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:77' if x < fi(0, 0, 1, 0, fm) && y == fi(0, 0, 1, 0, fm)
  -- 
  -- 'hydrophones_fixpt:76' max_phase(c) = atan2(y, x);
  -- 
  -- 'hydrophones_fixpt:75' x = fi(abs(real(c)), 0, 16, 17, fm);
  -- 
  -- 'hydrophones_fixpt:74' y = fi(abs(imag(c)), 0, 16, 16, fm);
  -- 
  -- 'hydrophones_fixpt:73' for c = 1:4
  -- 
  -- 'hydrophones_fixpt:72' max_time(:) = time;
  -- 
  -- 'hydrophones_fixpt:71' max_amplitude(:) = min_amplitude;
  -- 
  -- 'hydrophones_fixpt:70' if (min_amplitude > max_amplitude)
  -- 
  -- 'hydrophones_fixpt:66' min_amplitude(:) = amplitude;
  -- 
  -- 'hydrophones_fixpt:65' if amplitude < min_amplitude
  -- 
  -- 'hydrophones_fixpt:64' amplitude = fi(real(c) * real(c) + imag(c) * imag(c), 0, 16, 16, fm);
  -- 
  -- 'hydrophones_fixpt:63' for c=1:4
  min_amplitude <= to_unsigned(16#C800#, 16);

  tmp_10 <= to_unsigned(16#000000#, 23);

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp50
  max_time <= to_unsigned(16#000000#, 23);

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp29
  p3tmp_cast <= resize(tmp_12, 17);
  
  tmp_13 <= '1' WHEN ((resize(time_rsvd, 24) - resize(tmp_11, 24)) >= to_unsigned(16#000001#, 24)) AND (p3tmp_cast >= to_signed(16#00000#, 17)) ELSE
      '0';

  
  tmp_14 <= tmp_11 WHEN tmp_13 = '0' ELSE
      time_rsvd;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp19
  
  tmp_15 <= tmp_10 WHEN tmp_1 = '0' ELSE
      tmp_14;

  
  tmp_16 <= max_time_1 WHEN tmp_1 = '0' ELSE
      tmp_15;

  max_time_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      max_time_1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        max_time_1 <= tmp_16;
      END IF;
    END IF;
  END PROCESS max_time_reg_process;


  
  tmp_17 <= '1' WHEN time_rsvd < max_time_1 ELSE
      '0';

  
  tmp_18 <= max_time_1 WHEN tmp_17 = '0' ELSE
      max_time;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp25_trueregionp1
  p1_1_output : PROCESS (tmp_9, imag)
  BEGIN
    imag_1 <= imag;

    FOR c IN 0 TO 3 LOOP
      imag_1(c) <= tmp_9;
    END LOOP;

  END PROCESS p1_1_output;


  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp25
  p3tmp_cast_1 <= resize(tmp_12, 17);
  
  tmp_19 <= '1' WHEN ((resize(time_rsvd, 24) - resize(tmp_11, 24)) >= to_unsigned(16#000001#, 24)) AND (p3tmp_cast_1 >= to_signed(16#00000#, 17)) ELSE
      '0';

  
  tmp_20 <= imag WHEN tmp_19 = '0' ELSE
      imag_1;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp13
  
  tmp_21 <= tmp_8 WHEN tmp_1 = '0' ELSE
      tmp_20;

  
  tmp_22 <= imag WHEN tmp_1 = '0' ELSE
      tmp_21;

  imag_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      imag_2 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        imag_2 <= tmp_22;
      END IF;
    END IF;
  END PROCESS imag_reg_process;


  -- 'hydrophones_fixpt:49' for c=1:4
  p46_output : PROCESS (wave_idx, FI_SIN_COS_LUT_1, in_rsvd, imag_2)
    VARIABLE imag1 : vector_of_signed14(0 TO 15);
    VARIABLE fullScaleIndex : unsigned(15 DOWNTO 0);
    VARIABLE idxLUTLoZero : unsigned(7 DOWNTO 0);
    VARIABLE div_temp : vector_of_unsigned66(0 TO 3);
    VARIABLE cast : vector_of_unsigned66(0 TO 3);
    VARIABLE sub_cast : vector_of_unsigned37(0 TO 3);
    VARIABLE cast_0 : vector_of_unsigned37(0 TO 3);
    VARIABLE cast_1 : vector_of_unsigned8(0 TO 3);
    VARIABLE mul_temp : vector_of_unsigned40(0 TO 3);
    VARIABLE sub_cast_0 : vector_of_unsigned37(0 TO 3);
    VARIABLE sub_temp : vector_of_unsigned37(0 TO 3);
    VARIABLE cast_2 : vector_of_unsigned16(0 TO 3);
    VARIABLE mul_temp_0 : vector_of_unsigned48(0 TO 3);
    VARIABLE cast_3 : vector_of_unsigned32(0 TO 3);
    VARIABLE mul_temp_1 : vector_of_signed31(0 TO 3);
    VARIABLE sub_cast_1 : vector_of_signed30(0 TO 3);
    VARIABLE sub_cast_2 : vector_of_signed53(0 TO 3);
    VARIABLE cast_4 : vector_of_signed17(0 TO 3);
    VARIABLE add_cast : vector_of_signed16(0 TO 3);
    VARIABLE add_cast_0 : vector_of_signed32(0 TO 3);
    VARIABLE cast_5 : vector_of_signed9(0 TO 3);
    VARIABLE add_temp : vector_of_unsigned8(0 TO 3);
    VARIABLE add_cast_1 : vector_of_signed16(0 TO 3);
    VARIABLE sub_cast_3 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_2 : vector_of_signed16(0 TO 3);
    VARIABLE sub_cast_4 : vector_of_signed32(0 TO 3);
    VARIABLE sub_temp_0 : vector_of_signed32(0 TO 3);
    VARIABLE mul_temp_2 : vector_of_signed41(0 TO 3);
    VARIABLE add_cast_3 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_4 : vector_of_signed16(0 TO 3);
    VARIABLE add_cast_5 : vector_of_signed32(0 TO 3);
    VARIABLE add_temp_0 : vector_of_signed32(0 TO 3);
    VARIABLE cast_6 : vector_of_signed16(0 TO 3);
    VARIABLE mul_temp_3 : vector_of_signed33(0 TO 3);
    VARIABLE cast_7 : vector_of_signed32(0 TO 3);
    VARIABLE mul_temp_4 : vector_of_signed49(0 TO 3);
    VARIABLE sub_cast_5 : vector_of_signed48(0 TO 3);
    VARIABLE sub_cast_6 : vector_of_signed53(0 TO 3);
    VARIABLE sub_temp_1 : vector_of_signed53(0 TO 3);
  BEGIN
    imag1 := imag_2;

    FOR c1 IN 0 TO 3 LOOP
      cast(c1) := wave_idx & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      div_temp(c1) := cast(c1) / unsigned'(X"C90FDAA2");
      sub_cast(c1) := wave_idx & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      cast_0(c1) := div_temp(c1)(36 DOWNTO 0);
      cast_1(c1) := cast_0(c1)(36 DOWNTO 29);
      mul_temp(c1) := cast_1(c1) * unsigned'(X"C90FDAA2");
      sub_cast_0(c1) := mul_temp(c1)(36 DOWNTO 0);
      sub_temp(c1) := sub_cast(c1) - sub_cast_0(c1);
      cast_2(c1) := sub_temp(c1)(31 DOWNTO 16);
      mul_temp_0(c1) := unsigned'(X"A2F96524") * cast_2(c1);
      cast_3(c1) := mul_temp_0(c1)(46 DOWNTO 15);
      fullScaleIndex := cast_3(c1)(31 DOWNTO 16);
      idxLUTLoZero := fullScaleIndex(15 DOWNTO 8);
      mul_temp_1(c1) := imag1(c1) * to_signed(16#0FD70#, 17);
      sub_cast_1(c1) := mul_temp_1(c1)(29 DOWNTO 0);
      sub_cast_2(c1) := resize(sub_cast_1(c1) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 53);
      cast_4(c1) := signed(resize(in_rsvd(c1), 17));
      add_cast(c1) := signed(resize(idxLUTLoZero, 16));
      add_cast_0(c1) := resize(FI_SIN_COS_LUT_1(to_integer(resize(add_cast(c1) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      cast_5(c1) := signed(resize(fullScaleIndex(7 DOWNTO 0), 9));
      add_temp(c1) := idxLUTLoZero + to_unsigned(16#01#, 8);
      add_cast_1(c1) := signed(resize(add_temp(c1), 16));
      sub_cast_3(c1) := resize(FI_SIN_COS_LUT_1(to_integer(resize(add_cast_1(c1) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      add_cast_2(c1) := signed(resize(idxLUTLoZero, 16));
      sub_cast_4(c1) := resize(FI_SIN_COS_LUT_1(to_integer(resize(add_cast_2(c1) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      sub_temp_0(c1) := sub_cast_3(c1) - sub_cast_4(c1);
      mul_temp_2(c1) := cast_5(c1) * sub_temp_0(c1);
      add_cast_3(c1) := mul_temp_2(c1)(39 DOWNTO 8);
      add_cast_4(c1) := add_cast_3(c1)(30 DOWNTO 15);
      add_cast_5(c1) := resize(add_cast_4(c1) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      add_temp_0(c1) := add_cast_0(c1) + add_cast_5(c1);
      cast_6(c1) := add_temp_0(c1)(30 DOWNTO 15);
      mul_temp_3(c1) := cast_4(c1) * cast_6(c1);
      cast_7(c1) := mul_temp_3(c1)(31 DOWNTO 0);
      mul_temp_4(c1) := cast_7(c1) * to_signed(16#0A3D7#, 17);
      sub_cast_5(c1) := mul_temp_4(c1)(47 DOWNTO 0);
      sub_cast_6(c1) := resize(sub_cast_5(c1), 53);
      sub_temp_1(c1) := sub_cast_2(c1) - sub_cast_6(c1);
      imag1(c1) := sub_temp_1(c1)(51 DOWNTO 38);
    END LOOP;

    imag <= imag1;
  END PROCESS p46_output;


  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp23_trueregionp1
  p1_3_output : PROCESS (tmp_7, real_rsvd)
  BEGIN
    real_rsvd_1 <= real_rsvd;

    FOR c2 IN 0 TO 3 LOOP
      real_rsvd_1(c2) <= tmp_7;
    END LOOP;

  END PROCESS p1_3_output;


  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp38_trueregionp1
  tmp_23 <= signed(min_amplitude_1(9 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0');

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp27
  p3tmp_cast_2 <= resize(tmp_12, 17);
  
  tmp_24 <= '1' WHEN ((resize(time_rsvd, 24) - resize(tmp_11, 24)) >= to_unsigned(16#000001#, 24)) AND (p3tmp_cast_2 >= to_signed(16#00000#, 17)) ELSE
      '0';

  
  tmp_25 <= tmp_12 WHEN tmp_24 = '0' ELSE
      max_amplitude;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp16
  
  tmp_26 <= tmp_6 WHEN tmp_1 = '0' ELSE
      tmp_25;

  
  tmp_27 <= max_amplitude_1 WHEN tmp_1 = '0' ELSE
      tmp_26;

  max_amplitude_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      max_amplitude_1 <= to_signed(-16#8000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        max_amplitude_1 <= tmp_27;
      END IF;
    END IF;
  END PROCESS max_amplitude_reg_process;


  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp38
  p3tmp_cast_3 <= signed(resize(min_amplitude_1 & '0' & '0' & '0' & '0' & '0' & '0', 23));
  p3tmp_cast_4 <= resize(max_amplitude_1, 23);
  
  tmp_28 <= '1' WHEN p3tmp_cast_3 > p3tmp_cast_4 ELSE
      '0';

  
  tmp_29 <= max_amplitude_1 WHEN tmp_28 = '0' ELSE
      tmp_23;

  
  tmp_12 <= tmp_5 WHEN tmp_1 = '0' ELSE
      tmp_29;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp23
  p3tmp_cast_5 <= resize(tmp_12, 17);
  
  tmp_30 <= '1' WHEN ((resize(time_rsvd, 24) - resize(tmp_11, 24)) >= to_unsigned(16#000001#, 24)) AND (p3tmp_cast_5 >= to_signed(16#00000#, 17)) ELSE
      '0';

  
  tmp_31 <= real_rsvd WHEN tmp_30 = '0' ELSE
      real_rsvd_1;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp10
  
  tmp_32 <= tmp_4 WHEN tmp_1 = '0' ELSE
      tmp_31;

  
  tmp_33 <= real_rsvd WHEN tmp_1 = '0' ELSE
      tmp_32;

  real_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      real_rsvd_2 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        real_rsvd_2 <= tmp_33;
      END IF;
    END IF;
  END PROCESS real_reg_process;


  p45_output : PROCESS (wave_idx, FI_SIN_COS_LUT, in_rsvd, real_rsvd_2)
    VARIABLE real_rsvd1 : vector_of_signed14(0 TO 15);
    VARIABLE fullScaleIndex1 : unsigned(15 DOWNTO 0);
    VARIABLE idxLUTLoZero1 : unsigned(7 DOWNTO 0);
    VARIABLE div_temp1 : vector_of_unsigned66(0 TO 3);
    VARIABLE cast1 : vector_of_unsigned66(0 TO 3);
    VARIABLE sub_cast1 : vector_of_unsigned37(0 TO 3);
    VARIABLE cast_01 : vector_of_unsigned37(0 TO 3);
    VARIABLE cast_11 : vector_of_unsigned8(0 TO 3);
    VARIABLE mul_temp1 : vector_of_unsigned40(0 TO 3);
    VARIABLE sub_cast_01 : vector_of_unsigned37(0 TO 3);
    VARIABLE sub_temp1 : vector_of_unsigned37(0 TO 3);
    VARIABLE cast_21 : vector_of_unsigned16(0 TO 3);
    VARIABLE mul_temp_01 : vector_of_unsigned48(0 TO 3);
    VARIABLE cast_31 : vector_of_unsigned32(0 TO 3);
    VARIABLE mul_temp_11 : vector_of_signed31(0 TO 3);
    VARIABLE add_cast1 : vector_of_signed30(0 TO 3);
    VARIABLE add_cast_01 : vector_of_signed53(0 TO 3);
    VARIABLE cast_41 : vector_of_signed17(0 TO 3);
    VARIABLE add_cast_11 : vector_of_signed16(0 TO 3);
    VARIABLE add_cast_21 : vector_of_signed32(0 TO 3);
    VARIABLE cast_51 : vector_of_signed9(0 TO 3);
    VARIABLE add_temp1 : vector_of_unsigned8(0 TO 3);
    VARIABLE add_cast_31 : vector_of_signed16(0 TO 3);
    VARIABLE sub_cast_11 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_41 : vector_of_signed16(0 TO 3);
    VARIABLE sub_cast_21 : vector_of_signed32(0 TO 3);
    VARIABLE sub_temp_01 : vector_of_signed32(0 TO 3);
    VARIABLE mul_temp_21 : vector_of_signed41(0 TO 3);
    VARIABLE add_cast_51 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_6 : vector_of_signed16(0 TO 3);
    VARIABLE add_cast_7 : vector_of_signed32(0 TO 3);
    VARIABLE add_temp_01 : vector_of_signed32(0 TO 3);
    VARIABLE cast_61 : vector_of_signed16(0 TO 3);
    VARIABLE mul_temp_31 : vector_of_signed33(0 TO 3);
    VARIABLE cast_71 : vector_of_signed32(0 TO 3);
    VARIABLE mul_temp_41 : vector_of_signed49(0 TO 3);
    VARIABLE add_cast_8 : vector_of_signed48(0 TO 3);
    VARIABLE add_cast_9 : vector_of_signed53(0 TO 3);
    VARIABLE add_temp_1 : vector_of_signed53(0 TO 3);
  BEGIN
    real_rsvd1 := real_rsvd_2;

    FOR c3 IN 0 TO 3 LOOP
      cast1(c3) := wave_idx & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      div_temp1(c3) := cast1(c3) / unsigned'(X"C90FDAA2");
      sub_cast1(c3) := wave_idx & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      cast_01(c3) := div_temp1(c3)(36 DOWNTO 0);
      cast_11(c3) := cast_01(c3)(36 DOWNTO 29);
      mul_temp1(c3) := cast_11(c3) * unsigned'(X"C90FDAA2");
      sub_cast_01(c3) := mul_temp1(c3)(36 DOWNTO 0);
      sub_temp1(c3) := sub_cast1(c3) - sub_cast_01(c3);
      cast_21(c3) := sub_temp1(c3)(31 DOWNTO 16);
      mul_temp_01(c3) := unsigned'(X"A2F96524") * cast_21(c3);
      cast_31(c3) := mul_temp_01(c3)(46 DOWNTO 15);
      fullScaleIndex1 := cast_31(c3)(31 DOWNTO 16);
      idxLUTLoZero1 := fullScaleIndex1(15 DOWNTO 8);
      mul_temp_11(c3) := real_rsvd1(c3) * to_signed(16#0FD70#, 17);
      add_cast1(c3) := mul_temp_11(c3)(29 DOWNTO 0);
      add_cast_01(c3) := resize(add_cast1(c3) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 53);
      cast_41(c3) := signed(resize(in_rsvd(c3), 17));
      add_cast_11(c3) := signed(resize(idxLUTLoZero1, 16));
      add_cast_21(c3) := resize(FI_SIN_COS_LUT(to_integer(resize(add_cast_11(c3) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      cast_51(c3) := signed(resize(fullScaleIndex1(7 DOWNTO 0), 9));
      add_temp1(c3) := idxLUTLoZero1 + to_unsigned(16#01#, 8);
      add_cast_31(c3) := signed(resize(add_temp1(c3), 16));
      sub_cast_11(c3) := resize(FI_SIN_COS_LUT(to_integer(resize(add_cast_31(c3) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      add_cast_41(c3) := signed(resize(idxLUTLoZero1, 16));
      sub_cast_21(c3) := resize(FI_SIN_COS_LUT(to_integer(resize(add_cast_41(c3) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      sub_temp_01(c3) := sub_cast_11(c3) - sub_cast_21(c3);
      mul_temp_21(c3) := cast_51(c3) * sub_temp_01(c3);
      add_cast_51(c3) := mul_temp_21(c3)(39 DOWNTO 8);
      add_cast_6(c3) := add_cast_51(c3)(30 DOWNTO 15);
      add_cast_7(c3) := resize(add_cast_6(c3) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
      add_temp_01(c3) := add_cast_21(c3) + add_cast_7(c3);
      cast_61(c3) := add_temp_01(c3)(30 DOWNTO 15);
      mul_temp_31(c3) := cast_41(c3) * cast_61(c3);
      cast_71(c3) := mul_temp_31(c3)(31 DOWNTO 0);
      mul_temp_41(c3) := cast_71(c3) * to_signed(16#0A3D7#, 17);
      add_cast_8(c3) := mul_temp_41(c3)(47 DOWNTO 0);
      add_cast_9(c3) := resize(add_cast_8(c3), 53);
      add_temp_1(c3) := add_cast_01(c3) + add_cast_9(c3);
      real_rsvd1(c3) := add_temp_1(c3)(51 DOWNTO 38);
    END LOOP;

    real_rsvd <= real_rsvd1;
  END PROCESS p45_output;


  p44_output : PROCESS (real_rsvd, imag, min_amplitude)
    VARIABLE min_amplitude1 : unsigned(15 DOWNTO 0);
    VARIABLE amplitude : unsigned(15 DOWNTO 0);
    VARIABLE min_amplitude_0 : unsigned(15 DOWNTO 0);
    VARIABLE mul_temp2 : vector_of_signed28(0 TO 3);
    VARIABLE add_cast2 : vector_of_signed29(0 TO 3);
    VARIABLE mul_temp_02 : vector_of_signed28(0 TO 3);
    VARIABLE add_cast_02 : vector_of_signed29(0 TO 3);
    VARIABLE add_temp2 : vector_of_signed29(0 TO 3);
    VARIABLE cast2 : vector_of_unsigned23(0 TO 3);
    VARIABLE cast_02 : vector_of_unsigned23(0 TO 3);
  BEGIN
    min_amplitude1 := min_amplitude;

    FOR c4 IN 0 TO 3 LOOP
      mul_temp2(c4) := real_rsvd(c4) * real_rsvd(c4);
      add_cast2(c4) := resize(mul_temp2(c4), 29);
      mul_temp_02(c4) := imag(c4) * imag(c4);
      add_cast_02(c4) := resize(mul_temp_02(c4), 29);
      add_temp2(c4) := add_cast2(c4) + add_cast_02(c4);
      amplitude := unsigned(add_temp2(c4)(25 DOWNTO 10));
      cast2(c4) := resize(amplitude, 23);
      cast_02(c4) := min_amplitude1 & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      IF cast2(c4) < cast_02(c4) THEN 
        min_amplitude_0 := resize(amplitude(15 DOWNTO 7), 16);
      ELSE 
        min_amplitude_0 := min_amplitude1;
      END IF;
      min_amplitude1 := min_amplitude_0;
    END LOOP;

    min_amplitude_1 <= min_amplitude1;
  END PROCESS p44_output;


  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp40
  p3tmp_cast_6 <= signed(resize(min_amplitude_1 & '0' & '0' & '0' & '0' & '0' & '0', 23));
  p3tmp_cast_7 <= resize(max_amplitude_1, 23);
  
  tmp_34 <= '1' WHEN p3tmp_cast_6 > p3tmp_cast_7 ELSE
      '0';

  
  tmp_35 <= tmp_18 WHEN tmp_34 = '0' ELSE
      time_rsvd;

  
  tmp_11 <= tmp_3 WHEN tmp_1 = '0' ELSE
      tmp_35;

  p3tmp_cast_8 <= resize(tmp_12, 17);
  
  tmp_36 <= '1' WHEN ((resize(time_rsvd, 24) - resize(tmp_11, 24)) >= to_unsigned(16#000001#, 24)) AND (p3tmp_cast_8 >= to_signed(16#00000#, 17)) ELSE
      '0';

  tmp_37 <= to_signed(16#0000#, 16);

  tmp_38 <= to_signed(16#0000#, 16);

  tmp_39 <= (OTHERS => to_unsigned(16#0000#, 16));

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp36
  p3tmp_cast_9 <= signed(resize(min_amplitude_1 & '0' & '0' & '0' & '0' & '0' & '0', 23));
  p3tmp_cast_10 <= resize(max_amplitude_1, 23);
  
  tmp_40 <= '1' WHEN p3tmp_cast_9 > p3tmp_cast_10 ELSE
      '0';

  max_phase <= (OTHERS => to_unsigned(16#0000#, 16));

  -- 'hydrophones_fixpt:61' min_amplitude = fi(100, 0, 16, 9, fm);
  -- 
  -- F2F: End block
  -- 
  -- 'hydrophones_fixpt:58' max_time(:) = 0;
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:55' if time < max_time
  -- 
  -- 'hydrophones_fixpt:184' y = a;
  -- 
  -- 'hydrophones_fixpt:183' else
  -- 
  -- 'hydrophones_fixpt:179' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'hydrophones_fixpt:178' coder.inline( 'always' );
  -- 
  -- 'hydrophones_fixpt:51' imag(c) = fi_signed(imag(c) * alpha) - in(c) * cos(wave_idx) * beta;
  -- 
  -- 'hydrophones_fixpt:50' real(c) = real(c) * alpha + in(c) * sin(wave_idx) * beta;
  ATAN_UFRAC_LUT <= nc_4;

  -- 'hydrophones_fixpt:86' max_phase(c) = -pi/2;
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:83' if y < fi(0, 0, 1, 0, fm) && x == fi(0, 0, 1, 0, fm)
  -- 
  -- F2F: End block
  tmp_41 <= to_unsigned(16#921F#, 16);

  -- 'hydrophones_fixpt:134' real(c) = 0;
  -- 
  -- 'hydrophones_fixpt:133' for c = 1:4
  -- 
  -- 'hydrophones_fixpt:131' max_time(:) = time;
  -- 
  -- 'hydrophones_fixpt:130' max_amplitude(:) = -1;
  -- 
  -- 'hydrophones_fixpt:127' out(c-1)=time_diff;
  -- 
  -- 'hydrophones_fixpt:170' c = fi( c1, numerictype( c1 ), fimath( a ) );
  -- 
  -- 'hydrophones_fixpt:169' c1 = divide( divideType( a1, b1 ), a1, b1 );
  -- 
  -- 'hydrophones_fixpt:168' b1 = fi( b, 'RoundMode', 'fix' );
  -- 
  -- 'hydrophones_fixpt:167' a1 = fi( a, 'RoundMode', 'fix' );
  -- 
  -- 'hydrophones_fixpt:166' if isfi( a ) && isfi( b ) && isscalar( b )
  -- 
  -- 'hydrophones_fixpt:165' coder.inline( 'always' );
  -- 
  -- 'hydrophones_fixpt:126' time_diff = fi(fi_div(phase_shift, (fi(2 * pi, 0, 16, 13, fm) * frequency)) * fi(1000000, 
  -- 0, 20, 0, fm), 1, 16, 12, fm)
  -- 
  -- F2F: End block
  -- 
  -- 'hydrophones_fixpt:123' phase_shift(:) = phase_shift - fi(2 * pi, 0, 16, 13, fm);
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:120' if phase_shift >= fi(pi, 0, 16, 14, fm)
  -- 
  -- F2F: End block
  -- 
  -- 'hydrophones_fixpt:117' phase_shift(:) = phase_shift+ fi(2 * pi, 0, 16, 13, fm);
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:114' if phase_shift < fi(-pi, 1, 16, 13, fm)
  -- 
  -- 'hydrophones_fixpt:182' y = fi( a, new_nt, fimath( a ) );
  -- 
  -- 'hydrophones_fixpt:181' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'hydrophones_fixpt:180' nt = numerictype( a );
  -- 
  -- 'hydrophones_fixpt:179' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'hydrophones_fixpt:178' coder.inline( 'always' );
  -- 
  -- 'hydrophones_fixpt:112' phase_shift = fi(fi_signed(max_phase(3)) - base_phase, 1, 16, 15, fm);
  -- 
  -- 'hydrophones_fixpt:111' for c = 2:4
  -- 
  -- 'hydrophones_fixpt:110' base_phase = fi(max_phase(1), 0, 16, 15, fm);
  -- 
  -- 'hydrophones_fixpt:109' if time - max_time >= window && max_amplitude >= threshold
  -- 
  -- F2F: End block
  -- 
  -- 'hydrophones_fixpt:182' y = fi( a, new_nt, fimath( a ) );
  -- 
  -- 'hydrophones_fixpt:181' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'hydrophones_fixpt:180' nt = numerictype( a );
  -- 
  -- 'hydrophones_fixpt:179' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'hydrophones_fixpt:178' coder.inline( 'always' );
  -- 
  -- 'hydrophones_fixpt:104' max_phase(c) = fi_signed(max_phase(c)) - fi(pi, 0, 16, 14, fm);
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:101' if x > fi(0, 0, 1, 0, fm) && y < fi(0, 0, 1, 0, fm)
  -- 
  -- F2F: End block
  -- 
  -- 'hydrophones_fixpt:182' y = fi( a, new_nt, fimath( a ) );
  -- 
  -- 'hydrophones_fixpt:181' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'hydrophones_fixpt:180' nt = numerictype( a );
  -- 
  -- 'hydrophones_fixpt:179' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'hydrophones_fixpt:178' coder.inline( 'always' );
  -- 
  -- 'hydrophones_fixpt:98' max_phase(c) = fi_signed(max_phase(c)) - fi(2*pi, 0, 16, 13, fm);
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:95' if x < fi(0, 0, 1, 0, fm) && y < fi(0, 0, 1, 0, fm)
  -- 
  -- F2F: End block
  -- 
  -- 'hydrophones_fixpt:92' max_phase(c) = max_phase(c) + fi(pi, 0, 16, 14, fm);
  -- 
  -- F2F: Start block
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- 'hydrophones_fixpt:89' if x < fi(0, 0, 1, 0, fm) && y > fi(0, 0, 1, 0, fm)
  -- 
  -- F2F: End block
  tmp_42 <= to_unsigned(16#36F0#, 16);

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp36_trueregionp1
  p1_8_output : PROCESS (imag, real_rsvd, ATAN_UFRAC_LUT, max_phase_1)
    VARIABLE max_phase1 : vector_of_unsigned16(0 TO 15);
    VARIABLE tmp43 : signed(13 DOWNTO 0);
    VARIABLE y : unsigned(15 DOWNTO 0);
    VARIABLE tmp_0 : unsigned(15 DOWNTO 0);
    VARIABLE tmp_110 : signed(13 DOWNTO 0);
    VARIABLE x : unsigned(15 DOWNTO 0);
    VARIABLE tmp_210 : unsigned(15 DOWNTO 0);
    VARIABLE tmp_310 : unsigned(15 DOWNTO 0);
    VARIABLE tmp_43 : unsigned(15 DOWNTO 0);
    VARIABLE tmp_51 : unsigned(15 DOWNTO 0);
    VARIABLE tmp_61 : unsigned(7 DOWNTO 0);
    VARIABLE thPreCorr : unsigned(15 DOWNTO 0);
    VARIABLE thprecorr_0 : unsigned(15 DOWNTO 0);
    VARIABLE thprecorr_1 : unsigned(15 DOWNTO 0);
    VARIABLE thprecorr_2 : unsigned(15 DOWNTO 0);
    VARIABLE div_temp2 : vector_of_unsigned31(0 TO 3);
    VARIABLE div_temp_0 : vector_of_unsigned33(0 TO 3);
    VARIABLE cast3 : vector_of_signed15(0 TO 3);
    VARIABLE cast_03 : vector_of_signed15(0 TO 3);
    VARIABLE cast_12 : vector_of_signed15(0 TO 3);
    VARIABLE cast_22 : vector_of_signed15(0 TO 3);
    VARIABLE cast_32 : vector_of_unsigned17(0 TO 3);
    VARIABLE cast_42 : vector_of_unsigned17(0 TO 3);
    VARIABLE cast_52 : vector_of_unsigned17(0 TO 3);
    VARIABLE cast_62 : vector_of_unsigned17(0 TO 3);
    VARIABLE cast_72 : vector_of_unsigned31(0 TO 3);
    VARIABLE cast_8 : vector_of_unsigned33(0 TO 3);
    VARIABLE add_cast3 : vector_of_signed16(0 TO 3);
    VARIABLE add_cast_03 : vector_of_unsigned32(0 TO 3);
    VARIABLE add_cast_12 : vector_of_signed16(0 TO 3);
    VARIABLE sub_cast2 : vector_of_unsigned32(0 TO 3);
    VARIABLE add_cast_22 : vector_of_signed16(0 TO 3);
    VARIABLE sub_cast_02 : vector_of_unsigned32(0 TO 3);
    VARIABLE sub_temp2 : vector_of_unsigned32(0 TO 3);
    VARIABLE mul_temp3 : vector_of_unsigned40(0 TO 3);
    VARIABLE add_cast_32 : vector_of_unsigned32(0 TO 3);
    VARIABLE add_cast_42 : vector_of_unsigned16(0 TO 3);
    VARIABLE add_cast_52 : vector_of_unsigned32(0 TO 3);
    VARIABLE add_temp3 : vector_of_unsigned32(0 TO 3);
    VARIABLE cast_9 : vector_of_unsigned16(0 TO 3);
    VARIABLE cast_10 : vector_of_unsigned17(0 TO 3);
    VARIABLE cast_111 : vector_of_unsigned17(0 TO 3);
  BEGIN
    max_phase1 := max_phase_1;

    FOR c5 IN 0 TO 3 LOOP
      IF imag(c5) < to_signed(16#0000#, 14) THEN 
        cast3(c5) := resize(imag(c5), 15);
        cast_03(c5) :=  - (cast3(c5));
        tmp43 := cast_03(c5)(13 DOWNTO 0);
      ELSE 
        tmp43 := imag(c5);
      END IF;
      y := unsigned(tmp43(12 DOWNTO 0) & '0' & '0' & '0');
      tmp_0 := to_unsigned(16#FFFF#, 16);
      IF real_rsvd(c5) < to_signed(16#0000#, 14) THEN 
        cast_12(c5) := resize(real_rsvd(c5), 15);
        cast_22(c5) :=  - (cast_12(c5));
        tmp_110 := cast_22(c5)(13 DOWNTO 0);
      ELSE 
        tmp_110 := real_rsvd(c5);
      END IF;
      x := unsigned(tmp_110(11 DOWNTO 0) & '0' & '0' & '0' & '0');
      tmp_210 := to_unsigned(16#FFFF#, 16);
      IF y = to_unsigned(16#0000#, 16) THEN 
        thprecorr_2 := to_unsigned(16#0000#, 16);
      ELSE 
        cast_32(c5) := resize(x, 17);
        cast_42(c5) := y & '0';
        IF cast_32(c5) = cast_42(c5) THEN 
          thprecorr_1 := to_unsigned(16#6488#, 16);
        ELSE 
          cast_52(c5) := y & '0';
          cast_62(c5) := resize(x, 17);
          IF cast_52(c5) < cast_62(c5) THEN 
            IF x = to_unsigned(16#0000#, 16) THEN 
              tmp_310 := tmp_0;
            ELSE 
              cast_8(c5) := y & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
              IF x = 0 THEN 
                div_temp_0(c5) := C_divbyzero_p;
              ELSE 
                div_temp_0(c5) := cast_8(c5) / x;
              END IF;
              tmp_310 := div_temp_0(c5)(15 DOWNTO 0);
            END IF;
            tmp_51 := tmp_310;
          ELSE 
            IF y = to_unsigned(16#0000#, 16) THEN 
              tmp_43 := tmp_210;
            ELSE 
              cast_72(c5) := x & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
              IF y = 0 THEN 
                div_temp2(c5) := c_divbyzero_p_0;
              ELSE 
                div_temp2(c5) := cast_72(c5) / y;
              END IF;
              tmp_43 := div_temp2(c5)(15 DOWNTO 0);
            END IF;
            tmp_51 := tmp_43;
          END IF;
          tmp_61 := tmp_51(15 DOWNTO 8);
          add_cast3(c5) := signed(resize(tmp_61, 16));
          add_cast_03(c5) := resize(ATAN_UFRAC_LUT(to_integer(resize(add_cast3(c5) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
          add_cast_12(c5) := signed(resize(tmp_61, 16));
          sub_cast2(c5) := resize(ATAN_UFRAC_LUT(to_integer(resize((add_cast_12(c5) + to_signed(16#0001#, 16)) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
          add_cast_22(c5) := signed(resize(tmp_61, 16));
          sub_cast_02(c5) := resize(ATAN_UFRAC_LUT(to_integer(resize(add_cast_22(c5) + to_signed(16#0001#, 16), 32) - 1)) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
          sub_temp2(c5) := sub_cast2(c5) - sub_cast_02(c5);
          mul_temp3(c5) := tmp_51(7 DOWNTO 0) * sub_temp2(c5);
          add_cast_32(c5) := mul_temp3(c5)(39 DOWNTO 8);
          add_cast_42(c5) := add_cast_32(c5)(29 DOWNTO 14);
          add_cast_52(c5) := resize(add_cast_42(c5) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
          add_temp3(c5) := add_cast_03(c5) + add_cast_52(c5);
          cast_9(c5) := add_temp3(c5)(29 DOWNTO 14);
          thPreCorr := resize(cast_9(c5)(15 DOWNTO 1), 16);
          cast_10(c5) := resize(x, 17);
          cast_111(c5) := y & '0';
          IF cast_10(c5) < cast_111(c5) THEN 
            thprecorr_0 := to_unsigned(16#C90F#, 16) - thPreCorr;
          ELSE 
            thprecorr_0 := thPreCorr;
          END IF;
          thprecorr_1 := thprecorr_0;
        END IF;
        thprecorr_2 := thprecorr_1;
      END IF;
      max_phase1(c5) := thprecorr_2;
    END LOOP;

    max_phase_2 <= max_phase1;
  END PROCESS p1_8_output;


  
  max_phase_3 <= tmp_44 WHEN tmp_1 = '1' ELSE
      max_phase;

  
  tmp_45 <= max_phase_3 WHEN tmp_1 = '1' ELSE
      max_phase_1;

  max_phase_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      max_phase_1 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        max_phase_1 <= tmp_45;
      END IF;
    END IF;
  END PROCESS max_phase_reg_process;


  
  tmp_46 <= max_phase_1 WHEN tmp_40 = '0' ELSE
      max_phase_2;

  
  tmp_44 <= tmp_39 WHEN tmp_1 = '0' ELSE
      tmp_46;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp34
  p5phase_shift_sub_cast <= signed(resize(tmp_44(2), 19));
  p5phase_shift_sub_cast_1 <= signed(resize(tmp_44(0), 19));
  p5phase_shift_sub_temp <= p5phase_shift_sub_cast - p5phase_shift_sub_cast_1;
  phase_shift <= p5phase_shift_sub_temp(15 DOWNTO 0);

  tmp_47 <= '0';

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp34_trueregionp1
  p4tmp_1 <= to_signed(16#3243C#, 20);
  p4tmp_add_cast <= p4tmp_1(15 DOWNTO 0);
  tmp_48 <= phase_shift + p4tmp_add_cast;

  
  tmp_49 <= phase_shift WHEN tmp_47 = '0' ELSE
      tmp_48;

  
  tmp_50 <= tmp_38 WHEN tmp_1 = '0' ELSE
      tmp_49;

  tmp_52 <= '0';

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp31
  -- 
  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp31_trueregionp1
  p4tmp_3 <= to_signed(16#3243C#, 20);
  p4tmp_sub_cast <= p4tmp_3(15 DOWNTO 0);
  tmp_53 <= tmp_50 - p4tmp_sub_cast;

  
  tmp_54 <= tmp_50 WHEN tmp_52 = '0' ELSE
      tmp_53;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp21
  
  tmp_55 <= tmp_37 WHEN tmp_1 = '0' ELSE
      tmp_54;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp21_trueregionp1
  p1_12_output : PROCESS (tmp_55, out_rsvd)
    VARIABLE div_temp3 : vector_of_signed38(0 TO 2);
    VARIABLE cast4 : vector_of_signed38(0 TO 2);
    VARIABLE mul_temp4 : vector_of_signed59(0 TO 2);
    VARIABLE cast_04 : vector_of_signed76(0 TO 2);
  BEGIN
    out_rsvd_1 <= out_rsvd;

    FOR c6 IN 0 TO 2 LOOP
      cast4(c6) := tmp_55 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      div_temp3(c6) := cast4(c6) / to_signed(1286775000, 32);
      mul_temp4(c6) := div_temp3(c6) * to_signed(16#0F4240#, 21);
      cast_04(c6) := resize(mul_temp4(c6), 76);
      out_rsvd_1(c6) <= cast_04(c6)(27 DOWNTO 12);
    END LOOP;

  END PROCESS p1_12_output;


  
  tmp_56 <= out_rsvd WHEN tmp_36 = '0' ELSE
      out_rsvd_1;

  -- HDL code generation from MATLAB function: hydrophones_fixpt_trueregionp7
  
  tmp_57 <= tmp_2 WHEN tmp_1 = '0' ELSE
      tmp_56;

  
  tmp_58 <= out_rsvd WHEN tmp_1 = '0' ELSE
      tmp_57;

  -- 'hydrophones_fixpt:140' tdoa1=fi(out(1), 1, 16, 12, fm);
  tdoa1 <= tmp_58(0);

  -- 'hydrophones_fixpt:141' tdoa2=fi(out(2), 1, 16, 12, fm);
  tdoa2 <= tmp_58(1);

  -- 'hydrophones_fixpt:142' tdoa3=fi(out(3), 1, 16, 12, fm);
  tdoa3 <= tmp_58(2);

  ce_out <= clk_enable;

END rtl;

